{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Luminary",
  "patterns": [
    {
      "include": "#expressions"
    },
    {
      "include": "lists"
    }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.luminary",
          "match": "\\b(set|and|or|not|if|else|elif|while|for|by|fun|return|break|continue)\\b"
        }
      ]
    },
    "variables": {
      "match": "\\b([a-zA-Z][a-zA-Z0-9_]*)\\b",
      "name": "variable.other.luminary"
    },
    "function-call": {
      "name": "meta.function-call.luminary",
      "begin": "([a-zA-Z][a-zA-Z0-9_]*)\\s*(\\()",
      "beginCaptures": {
        "1": {
          "name": "entity.name.function.luminary"
        },
        "2": {
          "name": "punctuation.definition.parameters.begin.bracket.round.luminary"
        }
      },
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.parameters.end.bracket.round.luminary"
        }
      },
      "patterns": [
        {
          "include": "#expressions"
        }
      ]
    },
    "expressions": {
      "patterns": [
        {
          "include": "#keywords"
        },
        {
          "include": "#strings"
        },
        {
          "include": "#constants"
        },
        {
          "include": "#comments"
        },
        {
          "include": "#operators"
        },
        {
          "include": "#numbers"
        },
        {
          "include": "#function-call"
        },
        {
          "include": "#variables"
        },
        {
          "include": "#lists"
        }
      ]
    },
    "lists": {
      "name": "meta.array.literal.luminary",
      "begin": "\\s*(\\[)",
      "beginCaptures": {
        "1": {
          "name": "meta.brace.square.luminary"
        }
      },
      "end": "\\]",
      "endCaptures": {
        "0": {
          "name": "meta.brace.square.luminary"
        }
      },
      "patterns": [
        {
          "include": "#expressions"
        },
        {
          "include": "#punctuation-comma"
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.luminary",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.luminary",
          "match": "\\\\."
        }
      ]
    },
    "constants": {
      "match": "\\b(?:true|false|null)\\b",
      "name": "variable.language.luminary"
    },
    "comments": {
      "patterns": [
        {
          "captures": {
            "1": {
              "name": "punctuation.definition.comment.luminary"
            }
          },
          "match": "(//).*$\\n?",
          "name": "comment.line.double-slash.js"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "match": "(==|!=|<=|>=|<(?!<)|>(?!>))",
          "name": "keyword.operator.comparison.luminary"
        },
        {
          "match": "(\\+|-|\\*|/|%|\\^)",
          "name": "keyword.operator.arithmetic.luminary"
        },
        {
          "match": "(=)",
          "name": "keyword.operator.assignment.luminary"
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "match": "[0-9]+(\\.[0-9]+)?",
          "name": "constant.numeric.luminary"
        }
      ]
    }
  },
  "scopeName": "source.lum"
}
